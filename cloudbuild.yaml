steps:
  # 1. Build Frontend Docker image using substitutions for Firebase config
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Frontend'
    args: [
        'build',
        '-t',
        '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA',
        '-f',
        'Dockerfile',
        # Pass trigger substitution variables as build arguments
        '--build-arg',
        'VITE_FIREBASE_API_KEY=${_VITE_FIREBASE_API_KEY}',
        '--build-arg',
        'VITE_FIREBASE_AUTH_DOMAIN=${_VITE_FIREBASE_AUTH_DOMAIN}',
        '--build-arg',
        'VITE_FIREBASE_PROJECT_ID=${_VITE_FIREBASE_PROJECT_ID}',
        '--build-arg',
        'VITE_FIREBASE_STORAGE_BUCKET=${_VITE_FIREBASE_STORAGE_BUCKET}',
        '--build-arg',
        'VITE_FIREBASE_MESSAGING_SENDER_ID=${_VITE_FIREBASE_MESSAGING_SENDER_ID}',
        '--build-arg',
        'VITE_FIREBASE_APP_ID=${_VITE_FIREBASE_APP_ID}',
        '.'
      ]
    # No secretEnv needed here as we are using substitutions via --build-arg

  # 2. Build Backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
        'build',
        '-t',
        '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA',
        '-f',
        'backend/Dockerfile',
        './backend' # Context for backend build is the backend directory
      ]
    id: 'Build Backend'

  # 3. Push Frontend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA']
    id: 'Push Frontend'
    waitFor: ['Build Frontend']

  # 4. Push Backend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA']
    id: 'Push Backend'
    waitFor: ['Build Backend']

  # 5. Deploy Frontend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_FRONTEND_SERVICE_NAME}',
        '--image', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA',
        '--region', '${_CLOUDRUN_REGION}',
        '--platform', 'managed',
        '--allow-unauthenticated' # Allow public access to the frontend service
        # Add other flags if needed, e.g., --set-env-vars
      ]
    id: 'Deploy Frontend'
    waitFor: ['Push Frontend']

  # 6. Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_BACKEND_SERVICE_NAME}',
        '--image', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA',
        '--region', '${_CLOUDRUN_REGION}',
        '--platform', 'managed',
        '--service-account', '${_BACKEND_SERVICE_ACCOUNT}',
        '--update-secrets=MAILGUN_API_KEY=quicksend-mailgun-api-key:latest,MAILGUN_DOMAIN=quicksend-mailgun-domain:latest,MAILGUN_FROM_EMAIL=quicksend-mailgun-from-email:latest,GCP_BUCKET_NAME=quicksend-gcs-bucket-name:latest',
        '--set-env-vars=NODE_ENV=production,BACKEND_BASE_URL=https://quicksend-backend-service-627959729856.us-central1.run.app'
      ]
    id: 'Deploy Backend'
    waitFor: ['Push Backend']

# Define images to push (results of build steps)
images:
  - '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA'
  - '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA'

# Default Substitutions (can be overridden in Trigger)
substitutions:
  _AR_REGION: 'us-central1' # Artifact Registry Region
  _CLOUDRUN_REGION: 'us-central1' # Cloud Run Region
  _FRONTEND_SERVICE_NAME: 'quicksend-frontend-service' # Choose your Cloud Run service name
  _BACKEND_SERVICE_NAME: 'quicksend-backend-service' # Choose your Cloud Run service name
  _BACKEND_SERVICE_ACCOUNT: 'quicksend-backend@fleet-parsec-425911-i7.iam.gserviceaccount.com' # IMPORTANT: Replace with your actual service account email

# availableSecrets should be at this top level
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/quicksend-mailgun-api-key/versions/latest
    env: 'MAILGUN_API_KEY' # This env var is for Cloud Build steps to use if they need it directly
  - versionName: projects/$PROJECT_ID/secrets/quicksend-mailgun-domain/versions/latest
    env: 'MAILGUN_DOMAIN'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-mailgun-from-email/versions/latest
    env: 'MAILGUN_FROM_EMAIL'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-gcs-bucket-name/versions/latest
    env: 'GCP_BUCKET_NAME_SECRET' # Renamed to avoid conflict if GCP_BUCKET_NAME is also set via --set-env-vars for some reason

options:
  logging: CLOUD_LOGGING_ONLY 


  