steps:
  # 1. Build Frontend Docker image with build args for Firebase config
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Frontend'
    args: [
        'build',
        '-t',
        '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA',
        '-f',
        'Dockerfile',
        # Pass secrets as build arguments to the Dockerfile
        '--build-arg',
        'VITE_FIREBASE_API_KEY=${_VITE_FIREBASE_API_KEY}',
        '--build-arg',
        'VITE_FIREBASE_AUTH_DOMAIN=${_VITE_FIREBASE_AUTH_DOMAIN}',
        '--build-arg',
        'VITE_FIREBASE_PROJECT_ID=${_VITE_FIREBASE_PROJECT_ID}',
        '--build-arg',
        'VITE_FIREBASE_STORAGE_BUCKET=${_VITE_FIREBASE_STORAGE_BUCKET}',
        '--build-arg',
        'VITE_FIREBASE_MESSAGING_SENDER_ID=${_VITE_FIREBASE_MESSAGING_SENDER_ID}',
        '--build-arg',
        'VITE_FIREBASE_APP_ID=${_VITE_FIREBASE_APP_ID}',
        '.'
      ]
    # Define secrets to be used as underscore-prefixed env vars for the build step
    secretEnv: [
      '_VITE_FIREBASE_API_KEY',
      '_VITE_FIREBASE_AUTH_DOMAIN',
      '_VITE_FIREBASE_PROJECT_ID',
      '_VITE_FIREBASE_STORAGE_BUCKET',
      '_VITE_FIREBASE_MESSAGING_SENDER_ID',
      '_VITE_FIREBASE_APP_ID'
      ]

  # 2. Build Backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
        'build',
        '-t',
        '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA',
        '-f',
        'backend/Dockerfile',
        './backend' # Context for backend build is the backend directory
      ]
    id: 'Build Backend'

  # 3. Push Frontend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA']
    id: 'Push Frontend'
    waitFor: ['Build Frontend']

  # 4. Push Backend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA']
    id: 'Push Backend'
    waitFor: ['Build Backend']

  # 5. Deploy Frontend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_FRONTEND_SERVICE_NAME}',
        '--image', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA',
        '--region', '${_CLOUDRUN_REGION}',
        '--platform', 'managed',
        '--allow-unauthenticated' # Allow public access to the frontend service
        # Add other flags if needed, e.g., --set-env-vars
      ]
    id: 'Deploy Frontend'
    waitFor: ['Push Frontend']

  # 6. Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_BACKEND_SERVICE_NAME}',
        '--image', '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA',
        '--region', '${_CLOUDRUN_REGION}',
        '--platform', 'managed',
        # '--no-allow-unauthenticated', # Typically backend should not be public
        '--service-account', '${_BACKEND_SERVICE_ACCOUNT}' # Run as specific service account
        # Env vars like GCP_BUCKET_NAME should be mounted via Cloud Run secret config, not set here.
        # Add other flags like --port=5000 if needed (Cloud Run defaults often work)
      ]
    id: 'Deploy Backend'
    waitFor: ['Push Backend']

# Define images to push (results of build steps)
images:
  - '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-frontend/quicksend-frontend:$COMMIT_SHA'
  - '${_AR_REGION}-docker.pkg.dev/$PROJECT_ID/quicksend-backend/quicksend-backend:$COMMIT_SHA'

# Default Substitutions (can be overridden in Trigger)
substitutions:
  _AR_REGION: 'us-central1' # Artifact Registry Region
  _CLOUDRUN_REGION: 'us-central1' # Cloud Run Region
  _FRONTEND_SERVICE_NAME: 'quicksend-frontend-service' # Choose your Cloud Run service name
  _BACKEND_SERVICE_NAME: 'quicksend-backend-service' # Choose your Cloud Run service name
  _BACKEND_SERVICE_ACCOUNT: 'quicksend-backend@fleet-parsec-425911-i7.iam.gserviceaccount.com' # IMPORTANT: Replace with your actual service account email

# Define available secrets for the build steps
# Map secrets to underscore-prefixed env vars for the build step
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-api-key/versions/latest
    env: '_VITE_FIREBASE_API_KEY'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-auth-domain/versions/latest
    env: '_VITE_FIREBASE_AUTH_DOMAIN'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-project-id/versions/latest
    env: '_VITE_FIREBASE_PROJECT_ID'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-storage-bucket/versions/latest
    env: '_VITE_FIREBASE_STORAGE_BUCKET'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-messaging-sender-id/versions/latest
    env: '_VITE_FIREBASE_MESSAGING_SENDER_ID'
  - versionName: projects/$PROJECT_ID/secrets/quicksend-frontend-firebase-app-id/versions/latest
    env: '_VITE_FIREBASE_APP_ID'

options:
  logging: CLOUD_LOGGING_ONLY 


  